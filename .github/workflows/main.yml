name: Publish Python Package

on:
  push:
    branches:
      - main

jobs:
  bump-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.set_output.outputs.new_version }}
      version_bumped: ${{ steps.check_bump.outputs.version_bumped }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Setup Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Install dependencies
        run: pip install bump2version setuptools

      - name: Get current version
        id: get_version
        run: echo "::set-output name=current_version::$(python setup.py --version)"

      - name: Bump version
        id: bump_version
        run: |
          if git log -1 --pretty=%B | grep -q 'bump minor'; then
           bump2version --current-version ${{ steps.get_version.outputs.current_version }} --parse '(?P<major>\d+)\.(?P<minor>\d+)' --serialize '{major}.{minor}' --commit minor setup.py
          elif git log -1 --pretty=%B | grep -q 'bump major'; then
           bump2version --current-version ${{ steps.get_version.outputs.current_version }} --parse '(?P<major>\d+)\.(?P<minor>\d+)' --serialize '{major}.{minor}' --commit major setup.py
          else
           echo "No version bump needed"
           echo "::set-output name=new_version::${{ steps.get_version.outputs.current_version }}"
          fi

      - name: Set new version output
        id: set_output
        run: echo "::set-output name=new_version::$(python setup.py --version)"

      - name: Check if version bumped
        id: check_bump
        run: |
          if [ "${{ steps.get_version.outputs.current_version }}" != "$(python setup.py --version)" ]; then
            echo "::set-output name=version_bumped::true"
          else
            echo "::set-output name=version_bumped::false"
          fi

      - name: Push changes
        if: steps.check_bump.outputs.version_bumped == 'true'
        run: git push origin HEAD:main

      - name: Get commit SHA
        id: get_commit_sha
        run: echo "::set-output name=sha::$(git rev-parse HEAD)"


  build-and-publish:
    needs: bump-version
    if: needs.bump-version.outputs.version_bumped == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.bump-version.outputs.sha }}


      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Install setuptools, wheel, twine
        run: |
          pip install setuptools wheel twine

      - name: Build package
        run: |
          python setup.py sdist bdist_wheel

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ needs.bump-version.outputs.new_version }}
          release_name: Release ${{ needs.bump-version.outputs.new_version }}
          draft: true
          prerelease: false
          body: |
            To install : 
            ```bash
            pip install passthrough_support_excludeglob_fs-${{ needs.bump-version.outputs.new_version }}.whl
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get name of the wheel file
        id: get_wheel_name
        run: echo "::set-output name=wheel_name::$(ls -1 dist/*.whl)"

      - name : Upload release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.get_wheel_name.outputs.wheel_name }}
          asset_name: passthrough_support_excludeglob_fs-${{ needs.bump-version.outputs.new_version }}.whl
          asset_content_type: application/gzip
          asset_label: passthrough_support_excludeglob_fs-${{ needs.bump-version.outputs.new_version }}.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Publish release
        uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}


      - name: Upload to PyPI
        run: |
          twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
